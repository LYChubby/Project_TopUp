<main class="game-sec container mt-4">
  <div class="product-container">
    <section class="product-info">
      <section class="product-detail">
        <div class="product-detail-banner-container" style="width: 431px; height: 162px">
          <img src="images/val-logo.jpeg" alt="" class="product-detail-banner" style="width: 100%; height: 100%; object-fit: cover; border-radius: 6px" />
        </div>
        <div class="product-detail-description">
          <h2 class="product-detail-name">Valorant</h2>
          <div class="product-detail-tag-container">
            <div class="product-detail-icon-tag">
              <p>Pembayaran yang Aman</p>
            </div>
            <div class="product-detail-icon-tag">
              <p>Butuh Bantuan?</p>
            </div>
          </div>
        </div>
        <div class="preview-transaksi"></div>
      </section>
    </section>
    <section class="product-form-purchase">
      <form class="product-form-container" action="#" name="gameUser">
        <section class="form-section-container">
          <div class="form-section-container-topbar">
            <p class="step-number">1</p>
            <h2 class="title-bar">Masukan ID Game</h2>
          </div>
          <div class="form-section-container-main">
            <div class="form-section">
              <label for="game-id">Riot ID</label>
              <input class="form-section-input" id="game-id" type="text" placeholder="Masukkan ID Game" autocomplete="off" />
              <p class="note-id">Untuk menemukan Riot ID Anda, buka halaman profil akun dan salin Riot ID+Tag menggunakan tombol yang tersedia disamping Riot ID. (Contoh: Westbourne#SEA)</p>
            </div>
          </div>
        </section>


        <section class="form-section-container">
          <div class="form-section-container-topbar d-flex justify-content-between align-items-center">
           <div class="title-frm d-flex">
            <p class="step-number">2</p>
            <h2 class="title-bar">Pilih Nominal TopUp</h2>
           </div>
            <div class="btn-ad">
              <button type="button" class="btn-cr btn-add" onclick="addCard()">Add</button>
              <button type="button" class="btn-cr btn-edit" onclick="editCard()">Edit</button>
            </div>
          </div>
          <div class="form-section-container-main">
            <div class="form-section">
              <div class="form-section-card" id="card-container"></div>
            </div>
          </div>
        </section>
        

        <section class="form-section-container">
          <div class="form-section-container-topbar">
            <p class="step-number">3</p>
            <h2 class="title-bar">Metode Pembayaran</h2>
          </div>
          <div class="form-section-container-main">
            <div class="form-section">
              <div class="form-section-card">
                <div class="card-container">
                  <div class="card-items">
                    <img class="logo-items-pay" src="/images/gopaylogo.png" alt="" />
                    <div class="pay-bill" id="pay-bill">Rp 0</div>
                  </div>
                </div>
                <div class="card-container">
                  <div class="card-items">
                    <img class="logo-items-pay" src="/images/shopeepaylogo.png" alt="" />
                    <div class="pay-bill" id="pay-bill">Rp 0</div>
                  </div>
                </div>
                <div class="card-container">
                  <div class="card-items">
                    <img class="logo-items-pay" src="/images/danalogo.png" alt="" />
                    <div class="pay-bill" id="pay-bill">Rp 0</div>
                  </div>
                </div>
                <div class="card-container">
                  <div class="card-items">
                    <img class="logo-items-pay" src="/images/danalogo.png" alt="" />
                    <div class="pay-bill" id="pay-bill">Rp 0</div>
                  </div>
                </div>
                <div class="card-container">
                  <div class="card-items">
                    <img class="logo-items-pay" src="/images/danalogo.png" alt="" />
                    <div class="pay-bill" id="pay-bill">Rp 0</div>
                  </div>
                </div>
                <div class="card-container">
                  <div class="card-items">
                    <img class="logo-items-pay" src="/images/danalogo.png" alt="" />
                    <div class="pay-bill" id="pay-bill">Rp 0</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>
        <section class="form-section-container">
          <div class="form-section-container-topbar">
            <p class="step-number">4</p>
            <h2 class="title-bar">Kontak Anda</h2>
          </div>
          <div class="form-section-container-main">
            <div class="form-section">
              <label for="game-id">Opsional: Jika anda ingin mendapatkan bukti pembayaran atas pembelian anda, harap mengisi alamat emailnya</label>
              <input class="form-section-input" id="game-id" type="text" placeholder="Alamat E-mail" autocomplete="off" style="width: 100%" />
            </div>
          </div>
        </section>
      </form>
    </section>
  </div>
</main>

<script>
  function updatePayBill(amount) {
    const formatCurrency = (number) => {
      return "Rp " + number.toLocaleString("id-ID");
    };

    const payBills = document.querySelectorAll("#pay-bill");
    payBills.forEach((payBill) => {
      payBill.textContent = formatCurrency(amount);
    });
  }

  document.querySelectorAll(".card-container .card-item").forEach((card, index) => {
    card.addEventListener("click", () => {
      const prices = [55597, 111194, 222385];
      updatePayBill(prices[index]);
    });
  });
</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  function formatCurrency(value) {
    return value.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' });
  }

  async function loadCards() {
    try {
      const response = await fetch('/api/valorant');
      if (!response.ok) {
        throw new Error(`Failed to load cards: ${response.statusText}`);
      }
      const data = await response.json();
      const container = document.getElementById('card-container');
      container.innerHTML = '';

      if (data.length === 0) {
        container.innerHTML = '<p>No cards available</p>';
        return;
      }

      data.forEach((item) => {
        const card = document.createElement('div');
        card.className = 'card-container';
        card.setAttribute('onclick', `updatePayBill(${item.harga})`);
        card.innerHTML = `
          <div class="card-item">
            <div class="points">${item.vp} VP</div>
            <div class="items-price">Rp.${formatCurrency(item.harga)}</div>
            <button class="btn-cr btn-delete" onclick="deleteCard(${item.id}, event)">Delete</button>
          </div>
          <div class="logo-container">
            <img class="logo-items" src="/images/logovp.png" alt="VP Logo" />
          </div>
        `;
        container.appendChild(card);
      });
    } catch (error) {
      console.error('Error loading cards:', error);
      Swal.fire('Error', 'Failed to load cards. Please try again later.', 'error');
    }
  }

  async function addCard() {
    const { value: formValues } = await Swal.fire({
      title: 'Tambah Data',
      html: `
        <input type="text" id="vp" class="swal2-input" placeholder="VP">
        <input type="number" id="harga" class="swal2-input" placeholder="Harga" min="0">
      `,
      confirmButtonText: 'Add',
      focusConfirm: false,
      preConfirm: () => {
        const vp = document.getElementById('vp').value;
        const harga = document.getElementById('harga').value;
        if (!vp || !harga) {
          Swal.showValidationMessage('All fields are required');
          return;
        }
        return { vp, harga: parseInt(harga) }; // Ensure harga is a number
      },
    });

    if (formValues) {
      try {
        const response = await fetch('/api/valorant', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formValues),
        });
        if (!response.ok) {
          throw new Error('Failed to add card');
        }
        Swal.fire('Success', 'Card added successfully', 'success');
        loadCards();
      } catch (error) {
        console.error('Error adding card:', error);
        Swal.fire('Error', 'Failed to add card. Please try again.', 'error');
      }
    }
  }

  async function deleteCard(id, event) {
    event.stopPropagation(); // Prevent triggering the card click event
    const confirmation = await Swal.fire({
      title: 'Apakah anda yakin?',
      text: 'Ini akan terhapus secara PERMANENT!',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, delete it!',
    });

    if (confirmation.isConfirmed) {
      try {
        const response = await fetch(`/api/valorant/${id}`, {
          method: 'DELETE',
        });
        if (!response.ok) {
          throw new Error('Failed to delete card');
        }
        Swal.fire('Deleted!', 'The card has been deleted.', 'success');
        loadCards();
      } catch (error) {
        console.error('Error deleting card:', error);
        Swal.fire('Error', 'Failed to delete card. Please try again.', 'error');
      }
    }
  }

  async function editCard() {
    const cards = await fetch('/api/valorant');
    const data = await cards.json();

    const { value: formValues } = await Swal.fire({
      title: 'Edit Data',
      html: `
        <select id="id" class="swal2-input" onchange="updateCardDetails(this.value)">
          <option value="">Pilih ID data</option>
          ${data.map(item => `<option value="${item.id}">${item.id}</option>`).join('')}
        </select>
        <input type="text" id="vp" class="swal2-input" placeholder="VP">
        <input type="number" id="harga" class="swal2-input" placeholder="Harga" min="0">
      `,
      confirmButtonText: 'Edit',
      focusConfirm: false,
      preConfirm: () => {
        const id = document.getElementById('id')?.value;
        const vp = document.getElementById('vp')?.value;
        const harga = document.getElementById('harga')?.value;
        if (!id || !vp || !harga) {
          Swal.showValidationMessage('All fields are required');
          return;
        }
        return { id, vp, harga: parseInt(harga) };
      },
    });

    if (formValues) {
      try {
        const response = await fetch(`/api/valorant/${formValues.id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ vp: formValues.vp, harga: formValues.harga }),
        });
        console.log('Response Status:', response.status);
        if (!response.ok) {
          const errorData = await response.json();
          console.error('Response Error:', errorData);
          throw new Error('Failed to update card');
        }
        Swal.fire('Success', 'Card updated successfully', 'success');
        loadCards();
      } catch (error) {
        console.error('Error editing card:', error);
        Swal.fire('Error', 'Failed to update card. Please try again.', 'error');
      }
    }
  }

  // Update VP and harga when card ID is selected
  async function updateCardDetails(id) {
    const vpInput = document.getElementById('vp');
    const hargaInput = document.getElementById('harga');

    if (!id) {
      vpInput.value = '';
      hargaInput.value = '';
      return;
    }

    try {
      const response = await fetch(`/api/valorant/${id}`);
      if (!response.ok) {
        throw new Error('Failed to fetch card details');
      }
      const card = await response.json();

      // Update the input fields with the card details
      vpInput.value = card.vp || ''; // Set VP value or empty string if null
      hargaInput.value = card.harga || ''; // Set Harga value or empty string if null
    } catch (error) {
      console.error('Error fetching card details:', error);
    }
  }

  // Initialize
  loadCards();
</script>
